[{"C:\\Users\\HP\\Desktop\\react-tutorial\\faucet-dapp\\src\\index.js":"1","C:\\Users\\HP\\Desktop\\react-tutorial\\faucet-dapp\\src\\App.js":"2","C:\\Users\\HP\\Desktop\\react-tutorial\\faucet-dapp\\src\\reportWebVitals.js":"3","C:\\Users\\HP\\Desktop\\react-tutorial\\faucet-dapp\\src\\Main.js":"4","C:\\Users\\HP\\Desktop\\react-tutorial\\faucet-dapp\\src\\Navbar.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":4144,"mtime":1608364765395,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":1859,"mtime":1608293333173,"results":"10","hashOfConfig":"7"},{"size":1225,"mtime":1608292305124,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"14cjz7n",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"C:\\Users\\HP\\Desktop\\react-tutorial\\faucet-dapp\\src\\index.js",[],["25","26"],"C:\\Users\\HP\\Desktop\\react-tutorial\\faucet-dapp\\src\\App.js",["27"],"import './App.css';\nimport { Component } from 'react';\nimport Main from './Main.js'\nimport Web3 from 'web3';\nimport Navbar from './Navbar.js';\nimport StakeToken from './StakeToken.json';\nimport TokenFaucet from './TokenFaucet.json'\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n    console.log(window.web3)\n  }\n  async loadBlockchainData() {\n    const web3 = window.web3\n\n    const accounts = await web3.eth.getAccounts()\n\n    this.setState({ account: accounts[0] })\n\n\n    const ethBalance = await web3.eth.getBalance(this.state.account)\n    this.setState({ ethBalance: ethBalance })\n\n    const networkID = await web3.eth.net.getId()\n    \n\n    //load token data\n    const StakeTokenData = StakeToken.networks[networkID]\n    if (StakeTokenData) {\n      this.setState({staketokendata: true})\n      const StakeTokenAddress = StakeToken.networks[networkID].address\n\n      const staketoken = new web3.eth.Contract(StakeToken.abi, StakeTokenAddress)\n      this.setState({ staketoken })\n\n      let StakeTokenBalance = await staketoken.methods.balanceOf(this.state.account).call()\n \n\n      this.setState({ StakeTokenBalance: StakeTokenBalance.toString() })\n\n    } else {\n      this.setState({staketokendata: false})\n      window.alert('token to be staked not on this blockchain network')\n    }\n    const TokenFaucetData = TokenFaucet.networks[networkID]\n    if (TokenFaucetData) {\n      this.setState({tokenfaucetdata: true})\n      const TokenFaucetAddress = TokenFaucet.networks[networkID].address\n      this.setState({ TokenFaucetAddress: TokenFaucetAddress})\n      const tokenFaucet = new web3.eth.Contract(TokenFaucet.abi, TokenFaucetAddress)\n      this.setState({tokenFaucet: tokenFaucet})\n    } else {\n      this.setState({tokenfaucetdata: false})\n      window.alert('Faucet not live on this blockchain')\n    }\n\n\n\n    var StakeTokenBalanceFromWei = await web3.utils.fromWei(this.state.StakeTokenBalance, 'Ether')\n    let TokenToBeReceived = 1000 - StakeTokenBalanceFromWei;\n    this.setState({TokenToBeReceived: TokenToBeReceived})\n    if (StakeTokenBalanceFromWei >= 1000){\n      TokenToBeReceived = 0\n      this.setState({TokenToBeReceived: TokenToBeReceived})\n    }\n\n\n    this.setState({ loading: false })\n\n\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying Metamask!')\n    }\n  }\n\n  GetTokens = () => {\n    if (this.state.tokenfaucetdata === true){\n      this.setState({loading: true})\n      this.state.tokenFaucet.methods.CollectTokens().send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({loading: false})\n      })\n    } \n    else{\n      window.alert('Token faucet not live on this blockchain. Please switch')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      staketoken: {},\n      StakeTokenBalance: '0',\n      tokenFaucet: {},\n      TokenToBeReceived:'0',\n      staketokendata: true,\n      tokenfaucetdata: true\n    }\n  }\n \n\n  render() {\n    let content\n    if (this.state.loading) {\n      content = <p>loading.....</p>\n    } else {\n      content = <Main\n       StakeTokenBalance = {this.state.StakeTokenBalance}\n       TokenToBeReceived = {this.state.TokenToBeReceived} \n       GetTokens = {this.GetTokens}\n       tokenFaucet = {this.state.tokenFaucet}\n       tokenfaucetdata = {this.state.tokenfaucetdata}\n      />\n    }\n\n    return (\n      <div className=\"App\">\n        <Navbar account={this.state.account}> </Navbar>\n        <header className=\"App-header\">\n          <main role='main' className='col-lg-12 d-flex ml-auto mr-auto' style={{ maxWidth: '600px' }}></main>\n          <a\n            className=\"App-link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n          </a>\n          {content}\n        </header>\n      </div>\n    );\n  \n  }\n  \n  \n}\nexport default App;","C:\\Users\\HP\\Desktop\\react-tutorial\\faucet-dapp\\src\\reportWebVitals.js",[],"C:\\Users\\HP\\Desktop\\react-tutorial\\faucet-dapp\\src\\Main.js",[],"C:\\Users\\HP\\Desktop\\react-tutorial\\faucet-dapp\\src\\Navbar.js",["28"],"import React, { Component } from 'react'\nimport Identicon from 'identicon.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className = \"navbar navbar-dark fixed-top flex-md-nowrap p-0 shadow border-bottom border-secondary\" style = {{backgroundColor: '#333F47'}}>\n        <a  \n        className = 'navbar-brand col-sm-3 col-md-2 mr-0'\n        target = 'blank'\n        rel = 'noopener noreferrer'\n        >\n          Token Faucet\n        </a>\n\n        <ul className='nav-bar-nav px-3'>\n          <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\n            <small className= 'text-secondary'>\n              <small id =\"account\" style = {{color: \"white\"}}> {this.props.account} </small>\n            </small>\n            \n            { this.props.account\n              ? <img\n                className=\"ml-2\"\n                width='30'\n                height='30'\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n                alt=\"\"\n              />\n              : <span></span>\n            }\n\n          </li>\n        </ul>\n        \n      </nav> \n    );\n  }\n}\n\nexport default Navbar;\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":133,"column":11,"nodeType":"35","endLine":137,"endColumn":12},{"ruleId":"33","severity":1,"message":"34","line":10,"column":9,"nodeType":"35","endLine":14,"endColumn":10},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]